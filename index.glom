{
  vertexShader: `
    #define NORMAL
    #if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
      varying vec3 vViewPosition;
    #endif
    #ifndef FLAT_SHADED
      varying vec3 vNormal;
      #ifdef USE_TANGENT
        varying vec3 vTangent;
        varying vec3 vBitangent;
      #endif
    #endif
    #include <common>
    #include <uv_pars_vertex>
    #include <displacementmap_pars_vertex>
    #include <morphtarget_pars_vertex>
    #include <skinning_pars_vertex>
    #include <logdepthbuf_pars_vertex>
    #include <clipping_planes_pars_vertex>
    void main() {
      #include <uv_vertex>
      #include <beginnormal_vertex>
      #include <morphnormal_vertex>
      #include <skinbase_vertex>
      #include <skinnormal_vertex>
      #include <defaultnormal_vertex>
    #ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED
      vNormal = normalize( transformedNormal );
      #ifdef USE_TANGENT
        vTangent = normalize( transformedTangent );
        vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
      #endif
    #endif
      #include <begin_vertex>
      #include <morphtarget_vertex>
      #include <skinning_vertex>
      #include <displacementmap_vertex>
      #include <project_vertex>
      #include <logdepthbuf_vertex>
      #include <clipping_planes_vertex>
    #if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
      vViewPosition = - mvPosition.xyz;
    #endif
    }
  `,
  fragmentShader: `
    #define NORMAL
    uniform float opacity;
    #if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
      varying vec3 vViewPosition;
    #endif
    #ifndef FLAT_SHADED
      varying vec3 vNormal;
      #ifdef USE_TANGENT
        varying vec3 vTangent;
        varying vec3 vBitangent;
      #endif
    #endif
    #include <packing>
    #include <uv_pars_fragment>
    #include <bumpmap_pars_fragment>
    #include <normalmap_pars_fragment>
    #include <logdepthbuf_pars_fragment>
    #include <clipping_planes_pars_fragment>
    void main() {
      #include <clipping_planes_fragment>
      #include <logdepthbuf_fragment>
      #include <normal_fragment_begin>
      #include <normal_fragment_maps>
      gl_FragColor = vec4( packNormalToRGB( normal ), opacity );
    }
  `
}